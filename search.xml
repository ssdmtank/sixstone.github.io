<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js浮点数精度计算</title>
      <link href="/2021/08/04/js-fu-dian-shu-jing-du-ji-suan/"/>
      <url>/2021/08/04/js-fu-dian-shu-jing-du-ji-suan/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>浮点数计算精度不准确</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 加法</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">=</span> <span class="token number">0.30000000000000004</span><span class="token comment">// 减法</span><span class="token number">0.3</span> <span class="token operator">-</span> <span class="token number">0.2</span> <span class="token operator">=</span> <span class="token number">0.09999999999999998</span><span class="token comment">// 乘法</span><span class="token number">0.3</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">0.8999999999999999</span><span class="token comment">// 除法</span><span class="token number">0.3</span> <span class="token operator">/</span> <span class="token number">0.1</span> <span class="token operator">=</span> <span class="token number">2.9999999999999996</span><span class="token comment">// 保留小数</span><span class="token number">3.335</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"3.33499999999999996447"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><ul><li>在计算机角度，计算机算的是二进制，而不是十进制。</li><li>二进制后变成了无线不循环的数，而计算机可支持浮点数的小数部分可支持到52位。</li></ul><table><thead><tr><th align="center">十进制</th><th align="center">二进制</th></tr></thead><tbody><tr><td align="center">0.1</td><td align="center">0.0001 1001 1001 1001 …</td></tr><tr><td align="center">0.2</td><td align="center">0.0011 0011 0011 0011 …</td></tr><tr><td align="center">0.3</td><td align="center">0.0100 1100 1100 1100 …</td></tr><tr><td align="center">0.4</td><td align="center">0.0110 0110 0110 0110 …</td></tr><tr><td align="center">0.5</td><td align="center">0.1</td></tr><tr><td align="center">0.6</td><td align="center">0.1001 1001 1001 1001 …</td></tr></tbody></table><blockquote><p>小数转二进制的方法： 对小数点以后的数乘以2，有一个结果吧，取结果的整数部分（不是1就是0），然后再用小数部分再乘以2，再取结果的整数部分……以此类推，直到小数部分为0或者位数已经够了。<br>演示： 0.125 × 2 = 0.25 …………………..0<br>      0.25  × 2 = 0.5  …………………..0<br>      0.5   × 2 = 1.0  …………………..1<br>验证： 0.001   0×2的0次方+0×2的-1次方+0×2的-2次方+0×2的-3次方=1/8=0.125，正确。</p></blockquote><h4 id="0-1不能转化二进制"><a href="#0-1不能转化二进制" class="headerlink" title="0.1不能转化二进制"></a>0.1不能转化二进制</h4><p> 0.1 × 2 = 0.2 ………………….0<br> 0.2 × 2 = 0.4 ………………….0<br> 0.4 × 2 = 0.8 ………………….0<br> 0.8 × 2 = 1.6…………………..1<br> 0.6 × 2 = 1.2…………………..1<br> 0.2 × 2 = 0.4…………………..0<br> …..<br> 因为不能得到小数位为0且位数会溢出<br> 所有0.1转化会无限循环 =&gt; 0.0001 1001 1001 1001 …</p><h4 id="toFixed四舍五入不准确性"><a href="#toFixed四舍五入不准确性" class="headerlink" title="toFixed四舍五入不准确性"></a>toFixed四舍五入不准确性</h4><p><img src="/2021/08/04/js-fu-dian-shu-jing-du-ji-suan/toFixed.png" alt="ecmascript 规范对toFixed描述"></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1.595</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token parameter"><span class="token number">2</span></span><span class="token punctuation">)</span>   <span class="token operator">=></span> <span class="token string">"1.59"</span><span class="token number">1.5952</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token parameter"><span class="token number">2</span></span><span class="token punctuation">)</span>  <span class="token operator">=></span> <span class="token string">"1.60"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>按照上图步骤演示<span style="color:red;background:#fff5f5">1.595.toFixed(2) =&gt; “1.59”</span>下处理过程:</p><ul><li>x为1.595，小于$10^{21}$，f为2，要使n➗ $10^f$ - x准确的数学值尽可能接近零，取n为159和n为160，</li><li>159/100-1.595 = -0.004999999999999893</li><li>160/100-1.595 = 0.0050000000000001155</li><li>可以看到最接近0的是 -0.004999999999999893 故n为159，m为159，k为3<br>k−f为1，故a为15，则b为9，所以(1.595).toFixed(1)的结果为1.59</li><li>159/100-1.595 不为1.595 原理和0.1不能转化二进制一样</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法1-Math-js"><a href="#方法1-Math-js" class="headerlink" title="方法1 Math.js"></a>方法1 Math.js</h3><ol><li>安装<pre class="line-numbers language-js" data-language="js"><code class="language-js">npm install mathjs <span class="token operator">/</span> yarn add mathjs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>封装<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> math <span class="token keyword">from</span> <span class="token string">'mathjs'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 加</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">bignumber</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">,</span>math<span class="token punctuation">.</span><span class="token function">bignumber</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">// 乘</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">bignumber</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">,</span>math<span class="token punctuation">.</span><span class="token function">bignumber</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">// 减</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">bignumber</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">,</span>math<span class="token punctuation">.</span><span class="token function">bignumber</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">// 除</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">bignumber</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">,</span>math<span class="token punctuation">.</span><span class="token function">bignumber</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="方法2-浮点数转化整数计算"><a href="#方法2-浮点数转化整数计算" class="headerlink" title="方法2 浮点数转化整数计算"></a>方法2 浮点数转化整数计算</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** 判断是否为整数 */</span><span class="token keyword">const</span> <span class="token function-variable function">isInteger</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">===</span> obj<span class="token comment">/*** 将浮点数转换为整数* @ param floatNum 浮点数* @ return &#123; time //倍数, num // 整数&#125;*/</span><span class="token keyword">const</span> <span class="token function-variable function">floatToInteger</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> times <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment">// 整数不处理</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isInteger</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> times<span class="token punctuation">,</span> num<span class="token punctuation">&#125;</span>    <span class="token comment">// 倍数</span>    times <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">**</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>num<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length    <span class="token comment">// 转换整数</span>    <span class="token keyword">const</span> intNum <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">*</span> times <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>times<span class="token punctuation">,</span> num<span class="token operator">:</span> num <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token operator">-</span>intNum <span class="token operator">:</span> intNum<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 实现加减乘除运算，确保不丢失精度 * @param num1 &#123;number&#125; 运算数1 * @param num2 &#123;number&#125; 运算数2 * @param digits &#123;number&#125; 精度，保留的小数点数，比如 2, 即保留为两位小数 * @param type &#123;string&#125; 运算类型，有加减乘除（add/subtract/multiply/divide） */</span><span class="token keyword">const</span> <span class="token function-variable function">math</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> digits<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 先拆解</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> times <span class="token operator">:</span> t1<span class="token punctuation">,</span> num <span class="token operator">:</span> n1<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">floatToInteger</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> times <span class="token operator">:</span> t2<span class="token punctuation">,</span> num <span class="token operator">:</span> n2<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">floatToInteger</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span>    <span class="token keyword">const</span> max <span class="token operator">=</span> t1 <span class="token operator">></span> t2 <span class="token operator">?</span> t1 <span class="token operator">:</span> t2    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token string">'add'</span><span class="token operator">:</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>t1 <span class="token operator">===</span> t2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 两个小数位数相同</span>                result <span class="token operator">=</span> n1 <span class="token operator">+</span> n2            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t1 <span class="token operator">></span> t2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// num1 小数位 大于 num2</span>                result <span class="token operator">=</span> n1 <span class="token operator">+</span> n2 <span class="token operator">*</span> <span class="token punctuation">(</span>t1 <span class="token operator">/</span> t2<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span> <span class="token comment">// num1 小数位 小于 num2</span>                result <span class="token operator">=</span> n1 <span class="token operator">*</span> <span class="token punctuation">(</span>t2 <span class="token operator">/</span> t1<span class="token punctuation">)</span> <span class="token operator">+</span> n2            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> result <span class="token operator">/</span> max        <span class="token keyword">case</span> <span class="token string">'subtract'</span><span class="token operator">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t1 <span class="token operator">===</span> t2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                result <span class="token operator">=</span> n1 <span class="token operator">-</span> n2            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t1 <span class="token operator">></span> t2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                result <span class="token operator">=</span> n1 <span class="token operator">-</span> n2 <span class="token operator">*</span> <span class="token punctuation">(</span>t1 <span class="token operator">/</span> t2<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                result <span class="token operator">=</span> n1 <span class="token operator">*</span> <span class="token punctuation">(</span>t2 <span class="token operator">/</span> t1<span class="token punctuation">)</span> <span class="token operator">-</span> n2            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> result <span class="token operator">/</span> max        <span class="token keyword">case</span> <span class="token string">'multiply'</span><span class="token operator">:</span>             <span class="token keyword">return</span> <span class="token punctuation">(</span>n1 <span class="token operator">*</span> n2<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>t1 <span class="token operator">*</span> t2<span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token string">'divide'</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>n1 <span class="token operator">/</span> n2<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>t2 <span class="token operator">/</span> t1<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num1 <span class="token punctuation">,</span> num2 <span class="token punctuation">,</span> digits</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">math</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> digits<span class="token punctuation">,</span> <span class="token string">'add'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">subtract</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num1 <span class="token punctuation">,</span> num2 <span class="token punctuation">,</span> digits</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">math</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> digits<span class="token punctuation">,</span> <span class="token string">'subtract'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">multiply</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num1 <span class="token punctuation">,</span> num2 <span class="token punctuation">,</span> digits</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">math</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> digits<span class="token punctuation">,</span> <span class="token string">'multiply'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">divide</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num1 <span class="token punctuation">,</span> num2 <span class="token punctuation">,</span> digits</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">math</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> digits<span class="token punctuation">,</span> <span class="token string">'divide'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">toFixed</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num<span class="token punctuation">,</span> s</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> num <span class="token operator">!==</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"number不是数字"</span><span class="token punctuation">)</span>    <span class="token comment">// 修复toFixed精度问题</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">**</span> s <span class="token operator">*</span> num<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">**</span> s    <span class="token comment">// 补零</span>    result <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 整数</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            result <span class="token operator">+=</span> <span class="token string">'.'</span>            result <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> arr <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">&lt;</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>s <span class="token operator">-</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">const</span> $math <span class="token operator">=</span>  <span class="token punctuation">&#123;</span>  add<span class="token punctuation">,</span>  subtract<span class="token punctuation">,</span>   multiply<span class="token punctuation">,</span>  divide<span class="token punctuation">,</span>  toFixed<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 精度丢失 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es7 async/await</title>
      <link href="/2021/08/03/es7-async-await/"/>
      <url>/2021/08/03/es7-async-await/</url>
      
        <content type="html"><![CDATA[<p>async/await 是 ES7 的标准，Promise 是 ES6 标准，async/await 这套 API 也是用来帮助我们写异步代码的，它是构建在 Promise 之上的。</p><p>async 一般不单独使用，而是和 await 一起使用，一个 async 函数内部可能有 零个 或者 多个 await 。</p><h2 id="为什么要使用-async-？"><a href="#为什么要使用-async-？" class="headerlink" title="为什么要使用 async ？"></a>为什么要使用 async ？</h2><ul><li>隐藏 Promise ，更易于理解</li><li>用同步的思路写异步逻辑</li></ul><h2 id="异常处理-try…catch"><a href="#异常处理-try…catch" class="headerlink" title="异常处理 try…catch"></a>异常处理 try…catch</h2><ol><li>在 async 函数中，异常处理一般是 try…catch ，如果没有进行 try…catch ，await 表达式一旦 reject ，async 函数返回的 Promise 就会 reject 。</li><li>其实结合 Promise 来看，如果一个 Promise 状态敲定为 reject ，并且后续的 then 没有传入 reject 函数，或者没有 catch ，那么就会抛出异常。从这个角度来看，在 async 函数中用 try…catch 来包住 await 表达式，可能就是 catch 住这个异常，并且把这个 reject 信息传到 catch 里面。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Event Loop详解</title>
      <link href="/2021/07/29/event-loop-xiang-jie/"/>
      <url>/2021/07/29/event-loop-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="EventLoop-事件循环详解"><a href="#EventLoop-事件循环详解" class="headerlink" title="EventLoop 事件循环详解"></a>EventLoop 事件循环详解</h1><h2 id="一、javascript单线程"><a href="#一、javascript单线程" class="headerlink" title="一、javascript单线程"></a>一、javascript单线程</h2><p>JavaScript语言是单线程，即同一个时刻只做一件事。为何？因为，JavaScript作为浏览器脚本语言，如果它同时拥有多个线程，那么，它在操作DOM时，就会造成复杂的同步问题。比如，JavaScript的两个线程对同一个DOM节点进行操作，一个删除DOM，一个修改DOM。那么，浏览器该先执行那个操作呢？所以，为了避免出现此种情况，它只能是单线程。</p><h2 id="二、同步／异步任务"><a href="#二、同步／异步任务" class="headerlink" title="二、同步／异步任务"></a>二、同步／异步任务</h2><p>因为是单线程，所以，JavaScript所有任务都要排队。且只有前一个任务结束，才会执行后一个任务。但是，这会面临着一个问题：前一个任务耗时较长时，后一个任务就不得不一直等待。为解决这个问题，将所有任务分成了两种：</p><ul><li>同步任务<br>在主线程上排队执行的任务。且只有前一个任务执行完毕，后一个任务才会执行。</li><li>异步任务<br>不进主线程，而是进任务队列的任务。且仅当任务队列通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。不对主线程执行后续任务造成阻塞。</li></ul><p>因为增加了多线程并行之后，主线程需要频繁的和多个线程协调任务、调度任务，于是浏览器又进一步引入了事件循环(EventLoop)的机制，来协调多个线程多个事件之间的工作。</p><h2 id="三、宏任务／微任务"><a href="#三、宏任务／微任务" class="headerlink" title="三、宏任务／微任务"></a>三、宏任务／微任务</h2><ul><li> macro-task(宏任务)：包括整体代码script，各种事件回调（dom事件、I/O），setTimeout，setInterval、requestAnimationFrame、setImmediate（Node中的api）等。</li><li> micro-task(微任务)：promise.[then/catch/finally]，MutationObserver (dom变化监听/前端回溯)、process.nextTick（Node中的api）等。</li></ul><h2 id="四、浏览器中事件循环的具体机制执行流程"><a href="#四、浏览器中事件循环的具体机制执行流程" class="headerlink" title="四、浏览器中事件循环的具体机制执行流程"></a>四、浏览器中事件循环的具体机制执行流程</h2><ul><li>简要版： 调用栈为空 -&gt; 执行宏任务队列最早一个宏任务x -&gt; 执行x关联的微任务队列中的所有微任务 -&gt; 调用栈为空 … 如此循环</li><li>详细版：<ol><li>执行一个宏任务(栈中没有就中事件队列中获取)</li><li>执行过程中如果遇到微任务，就将它添加到为任务的任务队列中</li><li>宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）</li><li>当前宏任务执行完毕，开始检查渲染</li><li>渲染完毕之后，开始下一个宏任务</li></ol></li></ul><blockquote><p>事件循环处理宏任务和微任务队列的区别：在单次的循环迭代中，最多处理一个宏任务(其余的在队列中等待)，而队列中的所有微任务都会被处理</p></blockquote><p><img src="/2021/07/29/event-loop-xiang-jie/loop-1.png" alt="eventloop流程"></p><h2 id="五、案例"><a href="#五、案例" class="headerlink" title="五、案例"></a>五、案例</h2><h3 id="setTimeout-执行"><a href="#setTimeout-执行" class="headerlink" title="setTimeout 执行"></a>setTimeout 执行</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>   <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span> <span class="token comment">// 假设执行时间远远超过了3秒</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>task() 进入Event Table并注册回掉函数</li><li>执行sleep函数</li><li>3s到了， task进入Event Quene, 但sleep未执行完，只能等待</li><li>sleep执行完毕后，task 从 Event Queue进入主线程执行</li></ol><h3 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h3><ol><li>setInterval会每隔指定的时间把注册函数放入Event Quene</li><li>如果前面的任务耗时太久，那么同样需要等待</li><li>对于setInterval(fn,ms)来说，不是每过ms秒会执行一次fn，而是每过ms秒，会有fn进入Event Queue</li></ol><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><ul><li> macro-task(宏任务)：包括整体代码script，setTimeout，setInterval</li><li> micro-task(微任务)：promise.then，catch，finally</li></ul><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习 1"></a>练习 1</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'then'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'console'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>setTimeout, 将回调函数注册分发到宏任务Event Quene</li><li>Promise, new Promise立即执行，then函数分发到微任务Event Quene</li><li>console.log 立即执行</li><li>第一个宏任务结束，执行then微任务</li><li>第二轮循环，从宏任务Event Quene中执行setTime回调函数</li></ol><p><img src="/2021/07/29/event-loop-xiang-jie/loop-2.png" alt="这是代替图片的文字，随便写"></p><h3 id="练习-2"><a href="#练习-2" class="headerlink" title="练习 2"></a>练习 2</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// setTimeout1</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// then2</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// then1</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'8'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// setTimeout2</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// then3</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解析-2"><a href="#解析-2" class="headerlink" title="解析 2:"></a>解析 2:</h4><table><thead><tr><th align="center">循环轮次</th><th align="center">宏任务 Event Queue</th><th align="center">微任务 Event Queue</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">输出1</td><td align="center"></td><td align="center">执行第一轮宏任务</td></tr><tr><td align="center">1</td><td align="center">分发setTimeout1</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">1</td><td align="center">输出7</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">1</td><td align="center"></td><td align="center">分发then1</td><td align="center"></td></tr><tr><td align="center">1</td><td align="center">分发setTimeout2</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">1</td><td align="center">第一轮宏任务结束</td><td align="center">执行then1</td><td align="center">执行第一轮微任务</td></tr><tr><td align="center">1</td><td align="center">输出8</td><td align="center">第一轮事件微任务结束</td><td align="center">第一轮事件循环结束</td></tr><tr><td align="center">2</td><td align="center">执行setTimeout1</td><td align="center">执行第二轮宏任务</td><td align="center"></td></tr><tr><td align="center">2</td><td align="center">输出2</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2</td><td align="center">输出4</td><td align="center">分发then2</td><td align="center">第二轮宏任务结束</td></tr><tr><td align="center">2</td><td align="center"></td><td align="center">执行then2</td><td align="center">执行第二轮微任务</td></tr><tr><td align="center">2</td><td align="center">输出5</td><td align="center">第二轮微任务结束</td><td align="center">第二轮事件循环结束</td></tr><tr><td align="center">3</td><td align="center">执行setTimeout2</td><td align="center"></td><td align="center">执行第三轮宏任务</td></tr><tr><td align="center">3</td><td align="center">输出9</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">3</td><td align="center">输出11</td><td align="center">分发then3</td><td align="center">第三轮宏任务结束</td></tr><tr><td align="center">3</td><td align="center"></td><td align="center">执行then3</td><td align="center">执行第三轮微任务</td></tr><tr><td align="center">3</td><td align="center">输出12</td><td align="center">第三轮微任务结束</td><td align="center">第三轮事件循环结束</td></tr></tbody></table><h3 id="练习-3"><a href="#练习-3" class="headerlink" title="练习 3"></a>练习 3</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">// then1</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Promise1'</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// setTimeout1</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"setTimeout1"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">// setTimeout2</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout2'</span><span class="token punctuation">)</span>    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">// then 2</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Promise2'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解析3"><a href="#解析3" class="headerlink" title="解析3"></a>解析3</h4><table><thead><tr><th align="center">循环轮次</th><th align="center">宏任务 Event Queue</th><th align="center">微任务 Event Queue</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"></td><td align="center">分发then1</td><td align="center">第一轮宏任务开始</td></tr><tr><td align="center">1</td><td align="center">分发setTimeout2</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">1</td><td align="center"></td><td align="center">执行then1</td><td align="center">第一轮微任务开始</td></tr><tr><td align="center">1</td><td align="center">输出Promise1</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">1</td><td align="center">分发setTimeout1</td><td align="center">第一轮事件微任务结束</td><td align="center">第一轮事件循环结束</td></tr><tr><td align="center">2</td><td align="center">执行setTimeout2</td><td align="center"></td><td align="center">第二轮宏任务开始</td></tr><tr><td align="center">2</td><td align="center">输出setTimeout2</td><td align="center">分发then2</td><td align="center">第二轮宏任务结束</td></tr><tr><td align="center">2</td><td align="center"></td><td align="center">执行then2</td><td align="center">第二轮微任务开始</td></tr><tr><td align="center">2</td><td align="center">输出Promise2</td><td align="center">第二轮微任务结束</td><td align="center">第二轮事件循环结束</td></tr><tr><td align="center">3</td><td align="center">执行setTimeout1</td><td align="center"></td><td align="center">第三轮宏任务开始</td></tr><tr><td align="center">3</td><td align="center">输出setTimeout1</td><td align="center"></td><td align="center">第三轮事件循环结束</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端Leetcode</title>
      <link href="/2021/07/27/qian-duan-leetcode/"/>
      <url>/2021/07/27/qian-duan-leetcode/</url>
      
        <content type="html"><![CDATA[<h2 id="前端Leetcode"><a href="#前端Leetcode" class="headerlink" title="前端Leetcode"></a>前端Leetcode</h2><ol><li>给定一个整数数组，判断是否存在重复元素。</li></ol><p>示例 1:<br>输入: [1,2,3,1]<br>输出: true</p><p>示例 2:<br>输入: [1,2,3,4]<br>输出: false</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 解法1 map</span><span class="token keyword">const</span> <span class="token function-variable function">isDuplicateArr</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token comment">// 解法2 set</span><span class="token keyword">const</span> <span class="token function-variable function">isDuplicateArr2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token operator">=></span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">!==</span> nums<span class="token punctuation">.</span>length<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">示例：    s <span class="token operator">=</span> <span class="token string">"leetcode"</span>    返回 <span class="token number">0</span>    s <span class="token operator">=</span> <span class="token string">"loveleetcode"</span>    返回 <span class="token number">2</span>    <span class="token comment">// 提示：你可以假定该字符串只包含小写字母</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 解法1 map</span><span class="token keyword">var</span> <span class="token function-variable function">firstUniqueChar</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> charStr <span class="token keyword">of</span> str<span class="token punctuation">)</span>  map<span class="token punctuation">[</span>charStr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>charStr<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token comment">// 解法2</span><span class="token keyword">var</span> <span class="token function-variable function">firstUniqueChar2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> strArr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token comment">// 去除当前循环字符串</span>        strArr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment">// 比较当前循环字符串是否0 11在</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>strArr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写类似vue双向绑定</title>
      <link href="/2021/07/25/shou-xie-lei-si-vue-shuang-xiang-bang-ding/"/>
      <url>/2021/07/25/shou-xie-lei-si-vue-shuang-xiang-bang-ding/</url>
      
        <content type="html"><![CDATA[<h3 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h3> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>dd</strong></p>]]></content>
      
      
      <categories>
          
          <category> 手写代码3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手写代码 </tag>
            
            <tag> 手写代码2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/07/23/hello-world/"/>
      <url>/2021/07/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
